UCLASS(config=Game)
class AHumanTreeCharacter : public ACharacter
{
	GENERATED_BODY()

	UPROPERTY(VisibleAnywhere, BlueprintReadOnly, Category = Camera, meta = (AllowPrivateAccess = "true"))
	class USpringArmComponent* CameraBoom;

	UPROPERTY(VisibleAnywhere, BlueprintReadOnly, Category = Camera, meta = (AllowPrivateAccess = "true"))
	class UCameraComponent* FollowCamera;
public:
	AHumanTreeCharacter();

	virtual void Tick(float DeltaTime) override;

	UPROPERTY(VisibleAnywhere, BlueprintReadOnly, Category=Camera)
	float BaseTurnRate;

	UPROPERTY(VisibleAnywhere, BlueprintReadOnly, Category=Camera)
	float BaseLookUpRate;

	UPROPERTY(EditDefaultsOnly, Category = Weapon)
		TArray<TSubclassOf<class ASword>> WeaponClasses;

	UPROPERTY(EditAnyWhere, BlueprintReadWrite, Category = Health)
		float PlayerHP;

	UPROPERTY(config, EditAnyWhere, BlueprintReadWrite, Category = Health)
		float MaxHP;

	UFUNCTION(BlueprintCallable, Category = "BpCalled")
		void StartAttack();

	void StopAttack();

	int32 ComboNumber;

	float IsAction1;
	float IsAction2;
	float IsAction3;
	float IsAction4;

	ASword* DefaultWeapon;

	float BPUpDownValue;
	float BPLeftRightValue;

	UFUNCTION(BlueprintCallable, Category = "BPCalled")
		void BPUpDown(float Value);

	UFUNCTION(BlueprintCallable, Category = "BPCalled")
		void BPLeftRight(float Value);

	UPROPERTY(EditDefaultsOnly, Category = "Armor")
		TSubclassOf<class AArmor> ArmorClass;

	UFUNCTION(BlueprintCallable, Category = "BPCalled")
		void PutOnArmor();

	UFUNCTION(BlueprintCallable, Category = "BPCalled")
		void TakeOffArmor();

	void AddWeapon(class ASword* Weapon);

	UFUNCTION(BlueprintCallable, Category = "BPCalled")
		void ChangeSword(int32 InNum);

protected:

	virtual void BeginPlay() override;

	/** Resets HMD orientation in VR. */
	void OnResetVR();

	/** Handler for when a touch input begins. */
	void TouchStarted(ETouchIndex::Type FingerIndex, FVector Location);

	/** Handler for when a touch input stops. */
	void TouchStopped(ETouchIndex::Type FingerIndex, FVector Location);

	void SpawnDefaultInventory();

	float UpDownValue;
	float LeftRightValue;

	void UpDown(float Value);

	void LeftRight(float Value);

	UPROPERTY(EditDefaultsOnly, Category = Pawn)
		UAnimMontage* AttackAnim1;

	UPROPERTY(EditDefaultsOnly, Category = Pawn)
		UAnimMontage* AttackAnim2;

	UPROPERTY(EditDefaultsOnly, Category = Pawn)
		UAnimMontage* AttackAnim3;

	UPROPERTY(EditDefaultsOnly, Category = Pawn)
		UAnimMontage* AttackAnim4;

	UPROPERTY(EditDefaultsOnly, Category = "Sound")
		class USoundCue* SoundAttack;

	UPROPERTY(EditDefaultsOnly, Category = "FX")
		TArray<UParticleSystem*> AttackFX;

	UPROPERTY(Transient)
		UParticleSystemComponent* AttackFXComp;

	class AArmor* DefaultArmor;

	float AnimDuration;

	TArray<class ASword*> WeaponList;

	void SetCurrentWeapon(class ASword* NewWeapon, class ASword* LastWeapon);

	class ASword* CurrentWeapon;

protected:
	virtual void SetupPlayerInputComponent(class UInputComponent* PlayerInputComponent) override;

public:
	FORCEINLINE class USpringArmComponent* GetCameraBoom() const { return CameraBoom; }
	FORCEINLINE class UCameraComponent* GetFollowCamera() const { return FollowCamera; }
};